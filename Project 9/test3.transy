c* Brendan Thompson
c* test3.transy
c* Updated 12/08/17
C* Test File for Project 9 - Compiler & Executor
C* For testing Decimals, Negatives, and Assignment


c* =====================================
c* ======= Decimals & Negatives ========
c* =====================================

// lwrite "Hello, pick a decimal: "
// read decimalNumber
// lwrite "\nYou supplied: "
// write decimalNumber

// lwrite "Now pick a negative number: "
// read negativeNumber
// lwrite "\nYou supplied: "
// write negativeNumber

// subp sin (a, -6.28)

// loop x=0, 3.8, 1.2
// 		lwrite "\n Please Supply a Variable "
// 		read apple
// loop-end
// cdump 0, 5

// conditional:
// if (banana < 6.2) then true
// goto after
// true:
// lwrite "\nInsert next variable to compare to 6.2: "
// read banana
// goto conditional
// after:
// lwrite "\nWe're done!"

c* ======= BAD Decimals & Negatives ========
// dim badArray[3.5]
// dim goodArray[10]
// aread goodArray, 2.5, 6.8
// awrite goodArray, 2.5, 6.8
// cdump 0, 6.3

// stop

c* ===========================
c* ======= Assignment ========
c* ===========================

c* Test most of the commands
// lwrite "Give two values to add: "
// read first, second
// a = first + second
// write a
// lwrite "Give five values to subtract: "
// read first, second, third, fourth, fifth
// a = first - second - third - fourth - fifth
// write a
// lwrite "Give two values to multiply: "
// read first, second
// a = first * second
// write a
// lwrite "Give two values to divide: "
// read first, second
// a = first / second
// write a
// lwrite "Give two values to exponentialize: "
// read first, second
// a = first ^ second
// write a

c* Test Negative Numbers & Subtraction
// b = 50 - 10 - -5 - 10
// write b


c* Test Arrays
dim originalArray[10]
dim firstArray[10]
lwrite "Give five array values to sum: "
aread firstArray, 5, 9
// cdump 0, 30
c = firstArray[5] + firstArray[6] + firstArray[7] + firstArray[8] + firstArray[9]
write c
// cdump 0, 30
// cdump 980, 990

c* Comprehensive Test
// lwrite "100 * 5 / 2 - ((5 ^ 2) * 2) = "
// d = 100 * 5 / 2 - ((5 ^ 2) * 2)
// write d

// cdump 0, 5
// cdump 980, 990
stop